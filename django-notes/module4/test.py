'''
testing is an important component in the software development lifecycle. While debugging is more driven towards removing the applications, errors and bugs. Testing considers metrics for quality, reliability and performance. It effectively saves a lot of time for the developer.


Every language and framework has many testing options and developers make appropriate selections based on the project's requirements. Many testing packages and tools work well with Django. A popular method is unit testing, which you can use to isolate a function class or method and only test that piece of code when working with unit testing, you need the following baseline information. 

First, the test targets granular features in your code, the smallest possible testable units, then the output of the test will be pass fail or an error in this video. You will learn the concept of testing in Django using an example of the unit test module in python. In Django. The unit test module uses a class based approach. You add the tests inside a class that inherits a class called test case from the Django test package. Suppose you wrote a model called reservation and want to test it. 

First import that test case class that inherits test case, then import the reservation model. Once you create the tests, use the command python three manage dot pi test. Additionally, you can add specific configurations to run all tests within a specific package. For example, run the command, python three manage dot pi test reservations. To run a specific test case. Use the command python three manage dot pi test reservations dot tests dot reservation test case. Our suppose you want to run a specific test method inside a test case, for example, a method to calculate the seat count.

You can run the command like python three manage dot pi test reservations dot tests dot reservation. Test case dot test seat count. It's important to know that developers generally add these test cases under one or more files created under specific app folders. In a small project it's common for developers to name the file tests dot pi. In large projects that may contain multiple test files, it's common for developers to use names like test models dot pie and test views dot pi. Okay, now, you know about the concept of testing in Django, let's open v s code and explore an example to create a unit test. Earlier you learned how to use unit tests in python to test code. In this example you will explore how Django uses the unit test module with the test case package.

Let's explore how you can test the model data inside a Django application using a test case, notice that the project is already created and the app configuration is set up inside the settings, file installed apps list. In this example you will work with two files, models dot pi and tests dot pi Inside models dot pi, you create a model and add the test code inside the tests dot pi file. If either of these files does not exist, you can create them inside the my app directory.

So first you add a model inside the models dot pi file. This model will record the first name, last name and the booking time for a reservation, a customer makes at the little lemon website. The auto Now field inside the booking time logs the system's current time and is set to true next save the file and go to tests dot pi. Notice that the test case module inside the django dot test package has already been imported. Additionally, you must import the required package called date time. 


You also must import the model that you must use which is the reservation model. The next step is to create a class called reservation model test and inside it passed the test case. Next you add a set up test data class method and pass a class object inside it set up. Test data is a method present inside the test case that you use to add data inside the model. So in this example data is entered for the first name and the last name. It is important to know that booking time automatically updates as the auto Now parameter is set to true next you create a function called as test fields to check if the first name and the last name that I received are in a string format.

You perform the check using the assert statements to check both the first name and last name are of the string data type. Similarly you must create another function called as test underscore timestamps inside this function you insert another assert statement such as assert instance and this time compared the booking time to the imported daytime. Okay, once this code is ready, you must run the migrations since you have a newly created model.

The final part of this step is to remember to add the classmethod decorator. Since this is a class method. Now save the file with this code. Complete. You are now ready to run the tests by typing python three manage dot pi test in the terminal, press enter and notice that the application ran and passed two tests. The running of the tests is represented by the two dots displayed in the terminal back in the model let's change one of the fields from string to end to see if the test produces a different result. So save the file and run the test one more time. Notice that one of the tests has failed. Additionally, an assertion error is displayed stating that the last name you have assigned is not an instance of an integer class. The ascertain ation error is also indicated by the characters f dot which means that one of the tests has failed and the other one has passed. If you are familiar with using unit tests in python notice that the implementation is similar to that, which you will find in conventional python code.

This example demonstrated how to implement a basic test in jangle django as a platform and framework is pretty huge. So it's important to remember that many testing, configurations and options are available to be explored by the developer. In this video, you learned about the concept of testing in Django using an example of the unit test module in python.
'''